#!/usr/bin/python
'''
 * This software was created by United States Government employees
 * and may not be copyrighted.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
'''
import os
import glob
import shutil
import sys
path='/mnt/cgcsvn/cgc/users'
if len(sys.argv) > 1:
    path = sys.argv[1]
    if path == '.':
        path = os.getcwd()
sources = []
#sources.append(os.path.join(path, 'mft/zk'))
#sources.append(os.path.join(path, 'mft/simics'))
sources.append(os.path.join(path, 'mft/simics/modules'))
sources.append('/mnt/cgcsvn/cgc/trunk/cgc-monitor/zk')
sources.append('/mnt/cgcsvn/cgc/trunk/cgc-monitor')
sources.append('/mnt/cgcsvn/cgc/trunk/cgc-monitor/simics')
dest='/mnt/vmLib/cgcForensicsRepo/monitorPackages_cfe'
targets='/mnt/vmLib/cgcForensicsRepo/targetPackages_cfe64'
targets='/mnt/vmLib/cgcForensicsRepo/targetPackages_cfe_linux64'

try:
    os.makedirs(dest)
except:
    pass
try:
    os.makedirs(targets)
except:
    pass
try:
    os.makedirs(targetsLinux)
except:
    pass
for source in sources:
    for f in glob.glob(os.path.join(source, "*.deb")):
        just_name = os.path.basename(f)
        pack_name, dum = just_name.split('_', 1)
        dest_file = os.path.join(dest, just_name)
        print('pack_name is %s' % pack_name)
        s_time = os.path.getmtime(f)
        d_time = None
        old_files = glob.glob(os.path.join(dest, pack_name+"_*.deb"))
        if len(old_files) > 1:
            print('more than file matches %s, %s exit' % (pack_name, str(old_files)))
            exit(1)
        elif len(old_files) == 1:
            of = old_files[0]
            d_time = os.path.getmtime(of)
            if s_time > d_time:
                print('replacing %s with %s' % (of, f))
                os.remove(of)
                print("would copy %s" % just_name)
                shutil.copyfile(f, dest_file)
        else: 
           shutil.copyfile(f, dest_file)
