#!/bin/bash
:<<'END_COMMENT'
 * This software was created by United States Government employees
 * and may not be copyrighted.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
END_COMMENT

#
#Copy a set of files to a DECREE/Kangaroo vm and run a script to prep it for use as a
#CGC monitor target.  Note, these are only a subset of the target packages.
#
port=$1
one_box=$2
exec > cpToTarget-$port.log 2>&1
CGC_OS_TYPE=="freeBSD"
if [ ! -z $3 ]; then
    CGC_OS_TYPE=$3
fi
POV=NO
if [ ! -z $4 ]; then
    POV=$4
fi

nohost="-o StrictHostKeyChecking=no"
ssh-keygen -f ~/.ssh/known_hosts -R [localhost]:$port
echo "START cpToVagrant, port is $port one_box is $one_box OS_TYPE is $CGC_OS_TYPE POV is $POV"

done="NO"
if [ $CGC_OS_TYPE == "linux" ] || [ $CGC_OS_TYPE == "linux64" ]; then
   #while [ $done == "NO" ] && [ $CGC_OS_TYPE == "linux" ]; do
   #   scp -P $port $nohost /mnt/simics/simicsWorkspace/targetStage/ethtool*.deb vagrant@localhost:/tmp/
   #   if [ "$?" -ne 0 ]; then 
   #       echo "scp of ethtool failed"
   #   else
   #       echo "scp of ethtool ok"
   #       scp -P $port  $nohost /usr/share/cgc-monitor/noOffload.sh vagrant@localhost:/tmp/
   #       if [ "$?" -ne 0 ]; then 
   #           echo "scp of noOffload failed"
   #       else
   #           echo "scp of offload ok"
   #           ssh -p $port $nohost vagrant@localhost '/tmp/noOffload.sh &'
   #           if [ "$?" -ne 0 ]; then 
   #               echo "scp of noOffload failed"
   #           else
   #               echo "ssh of offload ok"
   #               done="YES"
   #           fi
   #       fi
   #   fi
   #   if [ $done == "NO" ]; then
   #       echo "ssh failed, sleep"
   #       sleep 3
   #   fi
   #   echo "done disabling checksum offload on eth0"
   #done
   scp -P $port $nohost /usr/share/cgc-monitor/ksections.py vagrant@localhost:/tmp/
   echo "scped ksections.py"
   done="NO"
   if [ $CGC_OS_TYPE == "dontDoThis" ]; then
      echo "copy go language, get coffee"
      while [ $done == "NO" ]; do
         scp -P $port $nohost /mnt/vmLib/bigstuff/go1*.gz vagrant@localhost:/tmp/
         if [ "$?" -ne 0 ]; then 
            echo "scp of golang failed"
            sleep 3
         else
            echo "scp of golang ok"
            done="YES"
         fi
      done
   fi
else
    ssh -p $port $nohost vagrant@localhost "sudo ln -s /usr/local/bin/bash /bin/bash"
    #ssh -p $port $nohost vagrant@localhost "sudo ifconfig em0 -rxcsum -txcsum"
    #ssh -p $port $nohost vagrant@localhost "sudo ifconfig bge0 -rxcsum -txcsum"
    scp -P $port $nohost /usr/share/cgc-monitor/bsdKSections.sh vagrant@localhost:/tmp/
    echo "did bsd bash link and scped bsdKsections.sh"
fi


echo "copy key files"
scp -P $port $nohost /usr/share/cgc-monitor/id_rsa* vagrant@localhost:/tmp/
# if multiple boxes, distinguish by first digit in given port number
which_box=${port:0:1}
echo "box is $which_box"
if [ "$?" -ne 0 ]; then 
    echo "scp failed"; exit 1; fi
if [ $one_box == "YES" ]; then
   if scp -P $port  $nohost /usr/share/cgc-monitor/runOneBox.sh vagrant@localhost:/tmp/ ; then
       echo "copy runOneBox ok"
   else
       echo "scp runOneBox failed"
       exit 
   fi
       
else
   if [ $which_box == "5" ]; then
      echo "copy runReplayMaster "
      scp -P $port  $nohost /usr/share/cgc-monitor/runReplayMaster.sh vagrant@localhost:/tmp/
   fi
   if [ $which_box == "6" ]; then
      echo "copy runIDS "
      scp -P $port  $nohost /usr/share/cgc-monitor/runIDS.sh vagrant@localhost:/tmp/
   fi
   if [ $which_box == "7" ]; then
       echo "copy serviceMaster "
       scp -P $port  $nohost /usr/share/cgc-monitor/runServiceMaster.sh vagrant@localhost:/tmp/
   fi
fi
#echo "copy dodate "
#scp -P $port $nohost /usr/share/cgc-monitor/dodate.sh vagrant@localhost:/tmp/
scp -P $port $nohost /usr/share/cgc-monitor/freezeOrGo.sh vagrant@localhost:/tmp/
scp -P $port $nohost /usr/share/cgc-monitor/prepTarget vagrant@localhost:/tmp/
scp -P $port $nohost /usr/share/cgc-monitor/startService vagrant@localhost:/tmp/
scp -P $port $nohost /usr/share/cgc-monitor/portListening vagrant@localhost:/tmp/
scp -P $port $nohost /usr/share/cgc-monitor/getUname.sh vagrant@localhost:/tmp/

myip=`getMyIp eth0`
echo "copyToVagrant has myip of <$myip>"
scp -P $port $nohost targetStage/myip.txt vagrant@localhost:/tmp/new_host_ip.txt
scp -P $port $nohost /usr/bin/getMyIp vagrant@localhost:/tmp/

scp -P $port $nohost /usr/share/cgc-monitor/interfaces.$which_box localhost:/tmp/interfaces

#copy the simics-agent for file transfers
if [ $CGC_OS_TYPE == "linux" ]; then
   echo "scp linux simics-agent"
   scp -P $port $nohost /mnt/vmLib/cgcForensicsRepo/targetPackages_cfe_linux/simics-agent localhost:/tmp/
elif [ $CGC_OS_TYPE == "linux64" ]; then
   echo "scp linux64 simics-agent"
   scp -P $port $nohost /mnt/vmLib/cgcForensicsRepo/targetPackages_cfe_linux64/simics-agent localhost:/tmp/
elif [ $CGC_OS_TYPE == "freeBSD64" ]; then
   echo "scp freeBSD64 simics-agent"
   scp -P $port $nohost /mnt/vmLib/cgcForensicsRepo/targetPackages_cfe64/simics-agent localhost:/tmp/
else
   echo "scp bsd simics-agent"
   scp -P $port $nohost /mnt/vmLib/cgcForensicsRepo/targetPackages_cfe/simics-agent localhost:/tmp/
fi


ssh -p $port $nohost vagrant@localhost "/tmp/prepTarget $one_box $POV &"
echo "done with cpToVagrant"
