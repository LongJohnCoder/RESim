#!/usr/bin/python
'''
 * This software was created by United States Government employees
 * and may not be copyrighted.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
'''
'''
 Start the suite of monitor processes, and then watch RAM resources.
 If RAM gets low, stop the monitors and restart them
'''
import os
import time
import subprocess
import logging
def getFree(free_out):
    lines = free_out.split('\n')
    for line in lines:
        if 'buffers/cache' in line:
            parts = line.strip().split()
            mem_free = parts[3]
            return int(mem_free)

def getLogger(log_dir):
    lgr = logging.getLogger(__name__)
    lgr.setLevel(logging.DEBUG)
    fh = logging.FileHandler(log_dir+'/monitorRamWatcher.log')
    fh.setLevel(logging.DEBUG)
    frmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    fh.setFormatter(frmt)
    lgr.addHandler(fh)
    lgr.info('Start of log from clearHardLocks.py')
    return lgr

lgr = getLogger('/mnt/cgc/logs')
lgr.debug('Begin monitorRamWatcher')
os.system('monitorSlaveBootstrap')
lgr.debug('Monitors started, now watch for low RAM')
while True:
    
   p1 = subprocess.Popen('/usr/bin/free', stdout = subprocess.PIPE)
   output, error = p1.communicate()
   free_memory = getFree(output)
   lgr.debug('free memory is %dKB' % free_memory)
   if free_memory < 1000000:
       lgr.debug('low memory, restart monitor')
       os.system('shutdownMonitor spare_the_watcher')
       time.sleep(4)
       os.system('monitorSlaveBootstrap')
   time.sleep(30)

