#! /bin/bash
:<<'END_COMMENT'
 * This software was created by United States Government employees
 * and may not be copyrighted.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
END_COMMENT

# /etc/init.d/initReplay.sh
### BEGIN INIT INFO
# Provides:          monitorSlaveService
# Required-Start:    $local_fs $network
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: cgc monitor slave bootstrap
# Description:       see short
### END INIT INFO
# Start a monitor slave service on a slave
#
#  NOTE: this does not kill monitorRamWatch.  That should die via shutdownMonitor
#
function killMonitors {
    pkill monitorSlaveBootstrap
    #kill $(ps aux | grep '[m]onitorSlaveBootstrap' | grep -v tail | awk '{print $2}')
    PROC=$(ps aux | grep '[m]onitorSlaveBootstrap' | grep -v tail | awk '{print $2}')
    if [ $? -eq 0 ]; then
        if [ ! -z "$PROC" ]; then
           echo proc to kill is $PROC
           kill $PROC
        fi
    fi
    PROC=$(ps aux | grep '[s]imics-common' | grep -v tail | awk '{print $2}')
    if [ $? -eq 0 ]; then
        if [ ! -z "$PROC" ]; then
            echo proc to kill is $PROC
            kill $PROC
        fi
    fi
}
function killDeathWatch {
    PROC=$(ps aux | grep '[d]eathWatch' | grep -v tail | awk '{print $2}')
    if [ $? -eq 0 ]; then
        if [ ! -z "$PROC" ]; then
            echo proc to kill is $PROC
            kill -9 $PROC
        fi
    fi
}
function killPackages {
    PROC=$(ps aux | grep '[t]argetWatcher' | grep -v tail | awk '{print $2}')
    if [ $? -eq 0 ]; then
        if [ ! -z "$PROC" ]; then
           echo proc to kill is $PROC
           kill $PROC
        fi
    fi
    PROC=$(ps aux | grep '[p]utPackages' | grep -v tail | awk '{print $2}')
    if [ $? -eq 0 ]; then
        if [ ! -z "$PROC" ]; then
           echo proc to kill is $PROC
           kill $PROC
        fi
    fi
}
CGC=/mnt/cgc
case "$1" in
  start)
    exec >> /tmp/monitorSlaveService.log 2>&1
    echo `date`
    echo "Starting monitorSlaveService from init.d"
    PROC=$(ps aux | grep '[s]imics-common' | grep -v tail | awk '{print $2}')
    if [ $? -eq 0 ]; then
        if [ ! -z "$PROC" ]; then
            echo SIMICS procs still running: $PROC
            exit
        fi
    fi
    PROC=$(ps aux | grep '[m]onitorSlaveBootstrap' | grep -v tail | awk '{print $2}')
    if [ $? -eq 0 ]; then
        if [ ! -z "$PROC" ]; then
            echo monitorSlaveBootstrap already running: $PROC
            exit
        fi
    fi
    PROC=$(ps aux | grep '[m]onitorRamWatcher' | grep -v tail | awk '{print $2}')
    if [ $? -eq 0 ]; then
        if [ ! -z "$PROC" ]; then
            echo monitorRamWatcher already running: $PROC
            exit
        fi
    fi
    su - mike -c monitorRamWatcher &
    ;;
  clean)
    echo `date`
    echo "Stopping packages and monitor slaves"
    killPackages
    killMonitors
    killDeathWatch
    ;;
  restart)
    echo 'not supported'
    ;;
  force-reload)
    echo 'not supported'
    ;;
  stop)
    echo `date`
    echo "Stopping monitor slaves"
    killMonitors
    ;;
  *)
    echo "Usage: /etc/init.d/monitorSlaveService {start|stop|clean}"
    exit 1
    ;;
esac

exit 0

