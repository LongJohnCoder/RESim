#!/usr/bin/python
import socket
import logging
import signal
import time
import traceback
import os
import sys
from threading import Thread, Lock, Condition
from monitorLibs import szk
from monitorLibs import configMgr
from monitorLibs import getMonitor
from monitorLibs import packageMgr 
from monitorLibs import utils
'''
Watch all replay nodes for locks that are deleted.  In such an event, create a replay package for
the specific replay.
'''
class deathWatch():
    def __init__(self, queue_name, cfg, instance):
        hostname = socket.gethostname()
        self.wait_lock = Lock()
        self.wait_cond = Condition(Lock())
        self.szk = szk.szk(hostname, cfg, instance)
        log_name='deathWatch'+instance
        self.lgr = utils.getLogger(log_name, cfg.logdir)
        self.lgr.debug("Start deathWatch, instance is %s" % instance)
        #if fh is not None:
        #    self.szk.setLogger(fh)
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        self.watched_cbs = []
        self.watched_replays = {}
        self.had_lock = {}
        self.queue_name = queue_name
        self.gm = getMonitor.getMonitor(self.szk, self.lgr)
        self.pp = packageMgr.packageMgr(self.szk, self.lgr, cfg, instance, False)
        self.package_done_path = None

    def signal_handler(self, signal, frame):
        self.lgr.debug ('deathWatch in signal handler')
        tb = traceback.format_exc()
        print tb
        try:
            self.wait_cond.notify()
        except:
            pass
        try:
            self.wait_lock.release()
        except:
            pass
        exit(0)

    '''
    Watch each CB node and their associated replays for locks 
    '''
    def checkCBs(self):
        children = self.szk.zk.get_children(szk.CBS_NODE, self.watchNewCB)
        for cb in children:
            #print 'checkCBs found '+cb
            #self.lgr.debug( 'checkCBs found '+cb)
            if self.szk.isCB(cb) and cb not in self.watched_cbs:
                self.watched_cbs.append(cb) 
                self.watched_replays[cb] = []
                self.had_lock[cb] = []
                replays = self.szk.zk.get_children(szk.CBS_NODE+'/'+cb, self.watchReplays)
                for replay in replays:
                    if self.szk.isPoV(replay) or self.szk.isPoll(replay):
                        #print 'checkCBs found replay '+replay
                        #self.lgr.debug( 'checkCBs found replay '+replay)
                        self.watched_replays[cb].append(replay)
                        
                        path = szk.CBS_NODE+'/'+cb+'/'+replay
                        self.checkLocks(path, cb, replay)
                    

    def watchNewCB(self, event):
        #print 'in watchNewCB for path %s' % event.path
        #self.lgr.debug( 'in watchNewCB for path %s' % event.path)
        self.checkCBs()

    '''
    Check the locks on a replay node to see if one came and went
    '''
    def checkLocks(self, path, cb, replay):
        locks = self.szk.zk.get_children(path, self.watchLocks)
        if szk.DONE not in locks:
            for lock in locks:
                #print 'checkLocks found lock '+lock
                self.lgr.debug('checkLocks found lock '+lock)
            my_lock = self.queue_name + '_lock'
            # has this replay been locked?
            if my_lock in locks:
                if replay not in self.had_lock[cb]:
                    self.had_lock[cb].append(replay)
            elif replay in self.had_lock[cb]:
                # replay had been locked, but no longer is, and is not DONE.  Assume a death.
                #print 'found replay that needs replay '+cb+' '+replay
                self.lgr.info( 'found replay that needs replay '+cb+' '+replay)
                # get the lock we'll use to wait for packages to finish
                # this lock ensures we only handle one package at a time
                got_lock = False
                while not got_lock:
                    got_lock = self.waitLock(3)
                    if not got_lock:
                        print 'deathWatch, checkLocks, did not get lock, wait'
                        self.lgr.info('deathWatch, checkLocks, did not get lock, wait')
                    else:
                        self.lgr.info('deathWatch, checkLocks, GOT LOCK')
                package = self.gm.getReplayPackage(os.path.dirname(path), replay)
                '''
                If we got a package, then the wait_lock will release when the consumer is done.
                Otherwise, release the locks
                '''
                if package is not None:
                    self.putPackage(package)
                else:
                    try:
                        self.wait_cond.notify()
                        self.wait_lock.release()
                    except:
                        pass
                self.had_lock[cb].remove(replay)
        else:
            # replay is done cancel the watch
            locks = self.szk.zk.get_children(path)
            if replay in self.had_lock[cb]:
                self.had_lock[cb].remove(replay)
            return False

    '''
    Callback invoked each time a replay is added to a CB node
    '''
    def watchReplays(self, event):
        # find current set of replays for this CB and reset the watch
        replays = self.szk.zk.get_children(event.path, self.watchReplays)
        cb = os.path.basename(event.path)
        for replay in replays:
            # make sure it is a replay
            if self.szk.isPoV(replay) or self.szk.isPoll(replay):
                self.lgr.debug( 'watchReplays found replay '+replay)

                # If we are not already watching this replay, start watching it
                if replay not in self.watched_replays[cb]: 
                    self.watched_replays[cb].append(replay)
                    #locks = self.szk.zk.get_children(event.path+'/'+replay)
                    self.checkLocks(event.path+'/'+replay, cb, replay)
 
        self.lgr.debug( 'in watchReplays for path %s' % event.path)

    '''
    Callback invoked each time a lock is created or deleted under a replay node 
    '''
    def watchLocks(self, event):
        # get the locks without a watch
        locks = self.szk.zk.get_children(event.path, self.watchLocks)
        replay = os.path.basename(event.path)
        cb = os.path.basename(os.path.dirname(event.path))
        self.lgr.debug( 'in watchLocks for path %s cb is %s  replay is %s' % (event.path, cb, replay))
        if szk.DONE not in locks:
            #locks = self.szk.zk.get_children(event.path, self.watchLocks)
            self.checkLocks(event.path, cb, replay)

    def waitLock(self, timeout):
        with self.wait_cond:
            current_time = time.time()
            start_time = current_time
            while current_time < start_time + timeout:
                if self.wait_lock.acquire(False):
                    self.lgr.debug('waitLock got lock')
                    return True
                else:
                    self.wait_cond.wait(timeout - current_time + start_time)
                    current_time = time.time()
        return False

    '''
    Encode and put a replay package into the queue consumed by the simulated target
    '''
    def putPackage(self, package):
        self.pp.localCopyPackage(package)
        bs = package.encode('latin-1')
        self.lgr.debug( 'coroner package is %s' % package)
        package_path = self.szk.addLocalPackage('some_package', bs)
        self.package_done_path = package_path+'/'+ szk.PACKAGE_DONE
        self.lgr.debug( 'coroner in putPackage, check if done at %s' % self.package_done_path)
        stat = self.szk.zk.exists(self.package_done_path, watch=self.watchPackageDone)
        if stat is None:
            self.lgr.debug( 'coroner package not done, as expected.  continue, watch will release lock')
            #got_lock = False
            #while not got_lock:
            #    got_lock = self.waitLock(5)
            #    if not got_lock:
            #        self.lgr.debug('deathWatch, putPackage, did not get lock wait')
        else:
            self.lgr.debug( 'coroner package done, not expected eh?')
        return bs

    '''
        Callback invoked when a package is complete.  We release the lock that the
        main thread is waiting on.
        TBD why is this watch never invoked?
    ''' 
    def watchPackageDone(self, event):
        self.lgr.debug( 'in watchPackageDone')
        self.lgr.debug( 'check if done at %s' % self.package_done_path)
        if event.path == self.package_done_path:
            self.lgr.debug('yes, done, do nothing though')
            '''
            try:
                self.wait_cond.notify()
            except:
                pass
            try:
                self.wait_lock.release()
            except:
                pass
            '''
        else:
            self.lgr.debug( 'unexpected call to watchPackageDone')
            self.lgr.debug( event.path)
        #self.package_done_path = None

    def wait(self):
        while True:
            '''
            got = self.waitLock(4000)
            if got:
                print 'got lock'
            else:
                print 'did not get lock'
            '''
            time.sleep(5)
            #self.lgr.debug('in wait loop, back from sleep')
            if self.package_done_path is not None:
                self.lgr.debug('in wait loop, some package done path to check '+self.package_done_path)
                stat = self.szk.zk.exists(self.package_done_path, watch=self.watchPackageDone)
                if stat is not None:
                    self.lgr.debug('cheating in the loop found that yes, it is done')
                
                    self.package_done_path = None
                    try:
                        self.wait_cond.notify()
                    except:
                        self.lgr.debug('FAILED cond notify')
                        pass
                    try:
                        self.wait_lock.release()
                    except:
                        self.lgr.debug('FAILED releasing lock')
                        pass
                else:
                    self.lgr.debug('NO, package is not done')
 
def usage():
    print 'deathWatch.py instance '
if __name__ == "__main__":
    if len(sys.argv) < 2:
        usage()
    instance = sys.argv[1]
    cfg = configMgr.configMgr()
    dw = deathWatch(szk.FORENSICS, cfg, instance)
    dw.checkCBs()
    dw.wait()
