#!/usr/bin/python
import sys
import logging
import time
import os
import socket
import kazoo
import StringIO
from threading import Thread, Lock
from monitorLibs import accessSQL
from monitorLibs import configMgr
from monitorLibs import szk
from monitorLibs import utils
LOGGED = 'logged'
'''
    A service that watches replay nodes and updates the sql database to reflect the results of the replay.
    TBD: NOTE: we only record the first replay for any given pair.
    Zk watches are set on CBs, replays and their done nodes.  The replay/logged node is created when a
    replay is put to the database, and that node serves as a exclusion lock for the watches that might compete.
'''
class updateDBLogs():
    def __init__(self):
        # need some kind of logging for kazoo, otherwise exceptions in watches are buried.
        os.umask(000)
        self.cfg = configMgr.configMgr()
        hostname = socket.gethostname()
        self.zk = szk.szk(hostname, self.cfg)
        # put in own dir so they don't get deleted when monitor logs are wiped out
        log_dir = self.cfg.sql_logdir
        self.lgr = utils.getLogger('updateDBLogs', log_dir)
        self.sql = accessSQL.accessSQL(self.cfg.db_name, self.lgr)
        self.lgr.debug('updateDBLogs connected to db: %s' % self.cfg.db_name)
        self.my_replays = {}
        self.done_replays = {}
        self.cb_count = 0
        self.replay_count = 0
        self.sql_lock = Lock()
        cb_list = self.sql.getCBs()
        for cb in cb_list:
            self.my_replays[cb] = self.sql.getReplays(cb)
            self.replay_count = self.replay_count + len(self.my_replays[cb])
        self.lgr.debug('starting with %d CBs and %d replays' % (len(cb_list), self.replay_count))

    '''
        Copy the event log summary into the artifact file system
    '''
    def writeArtifact(self, cb, cb_path, replay):
        child_node = cb_path+'/'+replay
        self.lgr.debug('writeArtifact for %s' % child_node)
        if self.zk.isDone(child_node):
            value, stat = self.zk.zk.get(child_node+'/'+szk.DONE)
            #print value
            #log_file = StringIO.StringIO(value)
            common_path = os.path.join(self.cfg.artifact_dir, utils.pathFromCommon(cb))
            replays_path = os.path.join(common_path, 'replays')
          
            results_path = os.path.join(replays_path, replay, 'results')
            try:
                os.makedirs(results_path)
            except:
                pass
            outf = os.path.join(results_path, replay+'.xml')
            try:
                f = open(outf, 'wb')
            except:
                self.lgr.error('could not open %s, nfs permissions?' % outf)
                exit(1)
            f.write(value)
            f.close()

    def doLog(self, cb, replay, replay_path, cb_path, watcher):
        '''
        Read the content of the replay done node and put it into the database.  Mark the node as being logged.
        Also put the log entry into the artifacts (e.g., NFS file system) (NOT YET FOR CFE)
        '''
        logged_path = replay_path+'/'+LOGGED
        if not self.isLogged(replay_path):
            try:
                self.zk.zk.create(logged_path)
            except kazoo.exceptions.NodeExistsError:
                self.lgr.debug('doLog, found %s exists, must have been beaten here, skip' % (logged_path))
                return
            except kazoo.exceptions.NoNodeError:
                self.lgr.debug('doLog, noNodeError on %s ' % (logged_path))
                return
            if not self.cfg.cfe:
                self.writeArtifact(cb, cb_path, replay)
            sqlOK = True
            entries, raw_entries = self.zk.getLog(cb_path, replay, watch = watcher)
            self.lgr.debug('doLog will add to log for %s replay_count: %d' % (replay, self.replay_count))
            #self.zk.showLog(cb_path, replay)
            i = 0
            if len(entries) == 0:
                self.lgr.error('in doLog for %s %s, but no entries!' % (cb, replay))
            else:
                for entry in entries:
                    #self.lgr.debug('doLog add entry for %s raw is %s' % (replay_path, raw_entries[i]))
                    self.sql_lock.acquire()
                    if not self.sql.addReplay(cb, replay, entry, raw_entries[i]):
                        sqlOK = False
                    self.sql_lock.release()
                    i += 1
                if not sqlOK:
                    self.lgr.error('doLog did not set logged node, sql.addReplay failed, deleting %s' % (logged_path))
                    self.zk.zk.delete(logged_path)
        else:
            self.lgr.debug('doLog already logged for %s  replay_count: %d' % (replay_path, self.replay_count))

    def checkReplaysWatch(self, event):
        self.lgr.debug('checkReplaysWatch for %s' % event.path)
        self.checkReplays(event.path)

    def checkReplays(self, cb_path):
        '''
        Use a cached list of done replays maintained in the CB node
        and my_replays[cb] to determine if we've yet processed the
        each replay for the CB.
        '''
        cb = os.path.basename(cb_path)
        try:
            value, stat = self.zk.zk.get(cb_path)
        except kazoo.exceptions.ConnectionLoss:
            self.lgr.error('checkReplays, error from zk.get, connection loss, reconnect?')
            self.zk.reconnect()
            self.checkReplays(None)
            return
        if cb not in self.my_replays:
            self.lgr.debug('adding cb %s to my_replays' % cb)
            self.my_replays[cb] = []
        if value is not None and len(value.strip()) > 0:
            replays_done = value.strip().split(' ')
            for replay in replays_done:
                replay_path = cb_path+'/'+replay
                if replay not in self.my_replays[cb]:
                    if self.zk.isPoV(replay) or self.zk.isPoll(replay):
                        self.doLog(cb, replay, replay_path, cb_path, self.done_watch)
                        self.lgr.debug('checkReplays did log for %s  replay_count: %d' % (replay_path, self.replay_count))
                        self.replay_count += 1
                        self.my_replays[cb].append(replay) 
        #else:
        #    self.checkReplaysNodes(cb_path)
            

    def checkReplaysNodes(self, cb_path):
        cb = os.path.basename(cb_path)
        try:
            replays = self.zk.zk.get_children(cb_path, watch=self.checkReplaysWatch)
        except kazoo.exceptions.ConnectionLoss:
            self.lgr.error('checkReplaysNodes, error from zk.get_children, connection loss, reconnect?')
            self.szk.reconnect()
            self.checkReplays(None)
            return
        if cb not in self.my_replays:
            self.lgr.debug('adding cb %s to my_replays' % cb)
            self.my_replays[cb] = []
        for replay in replays:
            replay_path = cb_path+'/'+replay
            if replay not in self.my_replays[cb]:
                if self.zk.isPoV(replay) or self.zk.isPoll(replay):
                    if self.zk.isDone(replay_path, self.done_watch):
                        self.doLog(cb, replay, replay_path, cb_path, self.done_watch)
                        self.lgr.debug('checkReplaysNodes did log for %s  replay_count: %d' % (replay_path, self.replay_count))
                        self.replay_count += 1
                    else:
                        self.lgr.debug('checkReplaysNodes replay not done: %s' % replay_path)
                    self.my_replays[cb].append(replay) 

    def checkCBs(self, event):
        if event is None:
            self.lgr.debug('in checkCBs first call')
        else:
            self.lgr.debug('in checkCBs path: %s' % event.path)
        children = self.zk.zk.get_children(szk.CBS_NODE, watch=self.checkCBs)
        for cb in children:
            cb_path = szk.CBS_NODE+'/'+cb
            self.lgr.debug('checkCBs look for replays on %s' % cb_path)
            self.cb_count += 1
            self.checkReplays(cb_path)
                 

    def done_watch(self, event):                        
        self.lgr.debug('in done_watch for %s' % (event.path))
        print('in done_watch for %s' % (event.path))
        replay_path, dum = os.path.split(event.path)
        cb_path, replay = os.path.split(replay_path)
        dum, cb = os.path.split(cb_path)
        self.replay_count += 1
        self.doLog(cb, replay, replay_path, cb_path, self.done_watch)                    
                    
    def isLogged(self, replay_path):
        retval = False
        done_node = replay_path+'/'+LOGGED
        stat = self.zk.zk.exists(done_node)
        if stat is not None:
            retval = True
        return retval
    
ul = updateDBLogs()
# Do forever, retry periodically in case a db write failed.
while True:
    ul.checkCBs(None)
    time.sleep(60) 
