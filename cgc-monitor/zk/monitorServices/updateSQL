#!/usr/bin/python
import sys
import xml.etree.ElementTree as ET
import logging
import time
import os
import socket
import traceback
import shutil
from monitorLibs import accessSQL
from monitorLibs import teamSets
from monitorLibs import configMgr
from monitorLibs import szk
from monitorLibs import utils
#PG_REPO = '/mnt/cgc/zk/pgRepo'
#DEVEL = os.getenv('CGC_DEVEL')
#if DEVEL is not None and (DEVEL == 'YES'):
#    PG_REPO = '/mnt/cgcsvn/cgc/users/mft/zk/pgRepo'
#if PG_REPO not in sys.path:
#    sys.path.append(PG_REPO)
#    print('using PG_REPO %s' % PG_REPO)

from threading import Thread
'''
    A service that watches team set nodes and updates the scoring database to reflect when the team sets have
    been vetted.  Also updates the local mysql database.  Note, much of the processing (e.g., node watching),
    occcurs in teamSets.
    Pass in "no_db" to prevent attempts to update the scoring database.
'''
class updateSQL():
    def __init__(self, no_db=False):
        # need some kind of logging for kazoo, otherwise exceptions in watches are buried.
        #logging.basicConfig()
        cfg = configMgr.configMgr()
        hostname = socket.gethostname()
        self.zk = szk.szk(hostname, cfg)
        # put in own dir so they don't get deleted when monitor logs are wiped out
        log_dir = cfg.sql_logdir
        try:
            os.mkdir(log_dir)
        except:
            pass
        self.lgr = utils.getLogger('updateSQL', log_dir)
        self.lgr.debug("updateSQL, init, connect to database: %s no_db is %r" % (cfg.db_name, no_db))
        self.sql = accessSQL.accessSQL(cfg.db_name, self.lgr)
        self.team_sets = teamSets.teamSets(self.zk, lgr=self.lgr)
        self.done_path = os.path.join(cfg.cfe_done_files_dir, cfg.cgc_event)

    def checkSets(self):
        self.lgr.debug('checkSets call to watchSets')
        self.team_sets.watchSets(self.doneCallbackWatch, self.doneCallbackDirect, self.newSetCallback)

    def doneCallbackWatch(self, event):
        path = os.path.dirname(event.path)
        #print 'in doneCallback via watch path is '+path
        self.lgr.debug('updateSQL doneCallback from watcher for '+path)
        self.logTheSetCFE(path)

    def doneCallbackDirect(self, path):
        #print 'in doneCallback direct path is '+path
        self.lgr.debug('updateSQL doneCallback from search for '+path)
        self.logTheSetCFE(path)

    def logTheSetCFE(self, path):
      try:
        '''
        PART OF A CALLBACK! NO EXEPTION LOG MESSAGES
        '''
        # get a summary of the results of the team submission set
        ss = self.team_sets.getSetCounts(path)
        self.lgr.debug('logTheSetCFE dump: %s' % ss.toString())
        #self.lgr.debug('logTheSetCFE updateSQL record for %s %s rcb_cleared: %r  pov_cleared: %r' % (ss.team_name, ss.cfg_file,
        #    not ss.rcb_failed_vet, not ss.pov_failed_vet))

        vet_ok = True
        if ss.rcb_failed_vet or ss.pov_failed_vet:
            vet_ok = False
        fname = os.path.splitext(ss.cfg_file)[0]+'.vet'
        done_file = os.path.join(self.done_path, fname)
        tmp_done_file = done_file+'.forensics_tmp'
        self.lgr.debug('logTheSetCFE, here 3 %s' % tmp_done_file)
        with open(tmp_done_file, 'w') as dfh:
            if vet_ok:
                dfh.write('PASS\n')
            else:
                dfh.write('FAIL\n')
            dfh.write(ss.toString())
        shutil.move(tmp_done_file, done_file) 
        self.lgr.debug('logTheSetCFE, moved %s to %s' % (tmp_done_file, done_file))

        logged_to_scoring = True
        # update the local database
        self.sql.setDoneCFE(ss.cfg_file, not ss.rcb_failed_vet, not ss.pov_failed_vet, 'dum record', logged_to_scoring)
        self.team_sets.setLogged(path)
      except:
          self.lgr.debug(traceback.format_exc())
          traceback.print_exc()
 
    def newSetCallback(self, event):
        self.checkSets()
        self.lgr.debug('updateSQL newSetCallback for '+event.path)
        #print 'in newSetCallback path is '+event.path

no_db = False
if len(sys.argv) > 1 and sys.argv[1] == 'no_db':
    no_db = True
print("updateSQL no_db is %r" % no_db)
us = updateSQL(no_db)
us.checkSets()
while True:
    time.sleep(3000000)
