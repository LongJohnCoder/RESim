#!/usr/bin/python
'''
 * This software was created by United States Government employees
 * and may not be copyrighted.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
'''

import json
import glob
import sys
import socket
import os
import time
import shutil
import zipfile
from monitorLibs import cfeCsetConfig
from monitorLibs import szk
from monitorLibs import configMgr
from monitorLibs import putMonitor
from monitorLibs import utils
from monitorLibs import teamSets
os.umask(0000)
'''
For a given list of CFE config files, add the associated files
to the forensics repo and process the associated replays using
the teamSet queue.

Alternately, read configuration files from a directory.
'''

def copyIfNotThere(src, dst):
    if not os.path.isfile(dst):
        done = False
        while True:
            if os.path.isfile(src):
                shutil.copyfile(src, dst)
                return True
            print('%s not yet there? wait, try again' % src)
            time.sleep(3)
    return False

def checkPolls(cbs_dir, set_cfg):
    print('checkPolls')
    polls = set_cfg.getPolls()
    print('checkPolls, got polls %s' % str(polls))
    if polls is None:
        return
    common = set_cfg.getCommonName()
    print('checkPolls for %s' % common)
    repo_polls = os.path.join(cbs_dir, common, 'author','polls')
    try:
        shutil.rmtree(repo_polls)
    except:
        print('could not delete %s' % repo_polls)
        pass
    try:
        os.makedirs(repo_polls, mode=0777)
    except:
        pass
    zf = zipfile.ZipFile(polls)
    count = 1
    for f in zf.namelist():
        print f
        pname = 'SP_%s_%06d' % (common, count)
        poll_path = os.path.join(repo_polls, pname)
        try:
            os.makedirs(poll_path)
        except:
            pass
        full_poll = os.path.join(poll_path, pname+'.xml')
        poll = zf.read(f)
        print('poll path is %s' % full_poll) 
        with open(full_poll, 'w') as pfh:
            pfh.write(poll)
            pass
  
        count+=1
        if count > 3:
            break
    zf.close()        

def addRCB(cbs_dir, set_cfg, moved_dir):
    '''
    Add a the files named within the CFE configuration file to the forensics file repo
    '''
    rcb_list = set_cfg.getRCBs()
    for rcb in rcb_list: 
        if not os.path.exists(os.path.dirname(rcb)):
            print 'cfeFlow, addRCB could not find %s, exiting' % rcb
            exit(1)

    cb_this_competitor = set_cfg.getCompetitorPath()
    rcb_id = os.path.basename(rcb_list[0])
    rcb_id, dum = os.path.splitext(rcb_id)
    #cb_cbs = os.path.join(cb_this_competitor, szk.CBs, rcb_id)
    rcb_id_pre = utils.rmBinNumFromName(rcb_id)
    print('addRCB, rcb_id is %s, pre is %s competitor path %s' % (rcb_id, rcb_id_pre, cb_this_competitor))
    cb_cbs = os.path.join(cb_this_competitor, szk.CBs, rcb_id_pre)

    try:
        os.makedirs(cb_cbs, mode=0777)
    except:
        pass
    bin_path = cb_cbs
    try:
        os.makedirs(bin_path, mode=0777)
    except:
        print('addRCB rcb %s already exists' % bin_path)
    for rcb in rcb_list: 
        dest =  bin_path+'/'+os.path.basename(rcb)
        copyIfNotThere(rcb, dest)

    pov = set_cfg.getPov()
    if pov is not None:
        cb_povs = cb_this_competitor + '/'+szk.POVs
        try:
            os.makedirs(cb_povs, mode=0777)
        except:
            print('addRCB pov path %s already exists' % cb_povs)
            pass
        dest =  os.path.join(cb_povs,os.path.basename(pov))
        copyIfNotThere(pov, dest)
    rules = set_cfg.getIDS()
    if rules is not None:
        cb_ids = cb_this_competitor + '/'+szk.IDSs
        try:
            os.makedirs(cb_ids, mode=0777)
        except:
            pass
        dest =  os.path.join(cb_ids, os.path.basename(rules))
        print('copy ids %s to  %s' % (rules, dest))
        copyIfNotThere(rules, dest)

def justAddRepo(cfg, game_path, moved_dir):
    cfg_list = glob.glob(moved_dir+'/*.json')
    for jfile in cfg_list:
        print jfile
        cfile = os.path.join(moved_dir, jfile)
        cset_cfg=cfeCsetConfig.cfeCsetConfig(cfile, cfg.db_name)
        ''' copy the assocated files to the forensics repo '''
        addRCB(cfg.cb_dir, cset_cfg, moved_dir)
        print('call checkPolls')

def addConfigList(config_files, cfg, moved_dir, max_config_files, pm, wait_for_sets):
    '''
    Process a list of cfe config files
    '''
    count = 0
    print('addConfigList, wait for sets %r' % wait_for_sets)
    for cfile in sorted(config_files):
        print('from list: cfile is <%s> db is %s' % (cfile, cfg.db_name))
        if not os.path.isfile(cfile):
            print('could not find %s, already moved?  skip' % (cfile))
            continue
        cset_cfg=cfeCsetConfig.cfeCsetConfig(cfile, cfg.db_name)
        if cset_cfg.getTeamId() != 3:
            continue
        ''' copy the assocated files to the forensics repo '''
        addRCB(cfg.cb_dir, cset_cfg, moved_dir)
        print('call checkPolls')
        checkPolls(cfg.cb_dir, cset_cfg)
        try:
            print('addConfigList move %s to %s' % (cfile, moved_dir))
            shutil.move(cfile, moved_dir)
        except shutil.Error as util_reason:
            print('addConfigList, ******* shutil error moving file %s to moved dir: %s' % (cfile, util_reason))
        except OSError as reason:
            print('addConfigList, ******* error moving file %s to moved dir: %s' % (cfile, reason))
            #exit(1)
        ''' update the zk tree to reflect the replays and insert into team set queue '''
        pm.updateTreeCompetitorCFE(cset_cfg, os.path.basename(cfile))
        count += 1
        if max_config_files > 0 and count >= max_config_files:
            break
    if wait_for_sets:
        ''' only intended for use when batch processing games '''
        tsm = teamSets.teamSets(zk, lgr)
        game_id = 'db_'+gname.split('.')[0]
        done = False
        print('will wait until all team sets are done for game_id %s' % game_id)
        while not done:
            num_done, num_need = tsm.areGameSetsDone(game_id)
            print('need %d, got %d ' % (num_need, num_done))
            if num_done != num_need:
                print('need %d, got %d sleep 5' % (num_need, num_done))
                time.sleep(5)
            else:
                done = True
    
def usage():
    print 'cfeFlow.py ( -list [cfg1, cfg2...] | path [count])'
    print '\twhere cfg1, cfg2... are CFE config files (.jsons)'
    print '\tOr, where path is a path to the game directory containing '
    print '\tCFE config files or the path to a single config file'
    exit(1)


print('args %s' % str(sys.argv))    


if len(sys.argv) < 2:
    usage()
cfg = configMgr.configMgr()
hostname = socket.gethostname()
# do zk to override cfg values from zookeeper
zk = szk.szk(hostname+"cfeFlow", cfg)
pov = None

''' path, relative to cfg.cfe_cfg_files_dir of where to find the json config files and others '''
gname = sys.argv[1]
gname_path = os.path.join(cfg.cfe_cfg_files_dir, gname)
''' where the files will be moved to after they've been copied to the forensics repo '''
moved_dir = os.path.join(cfg.cfe_moved_dir, gname)
print('cfeFlow for gname: %s,  moved dir is %s' % (gname, moved_dir))
try:
    os.makedirs(moved_dir, mode=0777)
except:
    pass

''' 
    where the forensic results files will be written after vetting completes for each config (team set) 
    Note that is done by updateSQL service
'''

done_dir = os.path.join(cfg.cfe_done_files_dir, gname)
try:
    os.makedirs(done_dir, mode=0777)
except:
    pass

max_config_files = 0
config_files = None
wait_for_sets = False
print('cfeFlow, # of argv is %d' % len(sys.argv))
if len(sys.argv) > 2 and (sys.argv[2] == '-list' or sys.argv[2] == '-wait_list'):
    config_file_name = sys.argv[3]
    with open(config_file_name) as f:
        config_files = f.readlines()
    if sys.argv[2] == '-wait_list':
        wait_for_sets = True
        print('will wait for sets to finish')
elif len(sys.argv) == 3 and sys.argv[2] == 'just_repo':
    justAddRepo(cfg, gname_path, moved_dir)
    print('done updating repo to include files from game dir')
    exit(0)
else:
    single_file = None
    if len(sys.argv) > 2:
        try:
            max_config_files = int(sys.argv[2])
        except:
            print('could not get int from %s' % sys.argv[2])
            usage()


lgr = utils.getLogger('cfeFlow', '/tmp/')
''' the module that manages enquing into the zk tree '''
#pm = putMonitor.putMonitor(zk, cfg, lgr, szk.MASTER_MSC_CONFIG_NODE, need_sql=True)
pm = putMonitor.putMonitor(zk, cfg, lgr, szk.MASTER_CONFIG_NODE, need_sql=True)

if config_files is not None:
    ''' use given list of cfg files, construct full paths '''
    with_path = []
    for cf in config_files:
        cf = cf.strip()
        if cf.endswith('.json'):
             with_path.append(os.path.join(gname_path, cf))
        else:
             print('cfeFlow, given config file %s?' % cf)
    addConfigList(with_path, cfg, moved_dir, max_config_files, pm, wait_for_sets)
else:    
    single_file = False
    if os.path.isfile(gname_path):
        single_file = True
    if not single_file:
        ''' look for all config (.json) files '''
        search_path = gname_path+'/*.json'
        print('cfeFlow create list of config files.  Search path %s' % search_path)
        config_files = glob.glob(search_path)
        addConfigList(config_files, cfg, moved_dir, max_config_files, pm, wait_for_sets)
    else:
        ''' cmd line requested a single file '''
        print('cmd line requested single cfile is <%s> db is %s' % (gname_path, cfg.db_name))
        cset_cfg=cfeCsetConfig.cfeCsetConfig(gname_path, cfg.db_name)
        addRCB(cfg.cb_dir, cset_cfg, moved_dir)
        shutil.move(gname_path, moved_dir)
        pm.updateTreeCompetitorCFE(cset_cfg, os.path.basename(gname_path))
pm.close()
zk.stop()
