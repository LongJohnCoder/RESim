#!/usr/bin/python
'''
 * This software was created by United States Government employees
 * and may not be copyrighted.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
'''

from monitorLibs import configMgr
from monitorLibs import szk
import os
import sys
import argparse
import shutil
parser = argparse.ArgumentParser()
parser.add_argument('--force', help='do not prompt user', action='store_true')
parser.add_argument('--all', help='delete all CBs, otherwise just the RCBs', action='store_true')
cfg = configMgr.configMgr()
cb_dir = cfg.cb_dir
args = parser.parse_args()
if not args.force:
    i = 'n'
    if args.all:
        prompt='delete all CBs from repo %s? (y/n)' % cb_dir
        i = raw_input(prompt)
    else:
        prompt='delete RCBs from repo %s? (y/n)' % cb_dir
        i = raw_input(prompt)
    if i.lower() != 'y':
        print('exiting without deleting')
        exit()

if args.all:
    print('deleting %s' % cb_dir)
    shutil.rmtree(cb_dir)
else:
    dlist = os.listdir(cb_dir)
    for d in dlist:
        if not d.startswith('CB'):
            ''' garbage got in the tree '''
            print('deleting %s' % d)
            shutil.rmtree(d)
        else:
            compet_path = os.path.join(cb_dir, d, szk.COMPETITOR)
            if os.path.isdir(compet_path):
                print('delete %s' % compet_path)
                shutil.rmtree(compet_path)
       
