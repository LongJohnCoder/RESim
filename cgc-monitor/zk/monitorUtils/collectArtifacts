#!/usr/bin/python
'''
 * This software was created by United States Government employees
 * and may not be copyrighted.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
'''

import sys
import os
import socket
import shutil
import logging
import gzip
import multiprocessing as mp
import subprocess
from monitorLibs import configMgr
from monitorLibs import utils
from monitorLibs import szk
'''
Gather all of the artifacts on this host (from /mnt/cgc/logs/traces and /mnt/cgc/logs/call_logs)
and write them to the NFS share.
NOTE: Do not run this while monitoring since it will likely saturate the network and disrupt
ZooKeeper coordination.
'''
TRACES = 'traces'
CALL_LOGS = 'call_logs'
def doZipCopy(files):
    source = files[0] 
    destination = files[1]
    print('in doZipCopy for %s to %s' % (source, destination))
    with open(source, 'rb') as f_in:
        if TRACES in source:
            # traces already encoded for compactness
            with open(destination, 'wb') as f_out:
                f_out.writelines(f_in)
        else:
            with gzip.open(destination+'.gz', 'wb') as f_out:
                f_out.writelines(f_in)
    print('doZipCopy done with %s' % source)

class collectArtifacts():
    def __init__(self):
        self.cfg = configMgr.configMgr()
        zk = szk.szk(None, self.cfg)
        if not 'vmLib' in self.cfg.artifact_dir:
            # nfs mounted artifacts dir, make sure it is mounted
            retcode = subprocess.call(['mountArtifacts'])
        self.setLogger(self.cfg.logdir)
        self.lgr.debug('collectArtifacts begin')
        try:
            os.mkdir(self.cfg.artifact_dir)
        except:
            pass

    def setLogger(self, log_dir):
        self.lgr = logging.getLogger(__name__)
        self.lgr.setLevel(logging.DEBUG)
        fh = logging.FileHandler(log_dir+'/collectArtifacts.log')
        fh.setLevel(logging.DEBUG)
        frmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        fh.setFormatter(frmt)
        self.lgr.addHandler(fh)
        self.lgr.info('Start of log from collectArtifacts.py')

    def copyFiles(self, ftype):
        self.lgr.debug('copyFiles for type %s' % ftype)
        trace_dir = os.path.join(self.cfg.logdir, ftype)
        bins = utils.onlyDirs(trace_dir)
        pool = mp.Pool(processes=16)
        for b in bins:
            # note brute force will try create of same common directory for each binary
            common = utils.getCommonName(b)
            common_path = os.path.join(self.cfg.artifact_dir, utils.pathFromCommon(common))
            self.lgr.debug('try to mkdir at %s' % common_path)
            try:
                os.makedirs(common_path)
            except:                        
                pass
            source_bin = os.path.join(trace_dir, b)
            self.lgr.debug('source_bin is %s' % source_bin)
            replays = utils.onlyFiles(source_bin)
            for replay in replays:
                r = os.path.splitext(replay)[0]
                r1 = r
                if ftype == CALL_LOGS:
                    r1 = r.rsplit('_', 1)[0]
                    self.lgr.debug('rsplit of %s got %s' % (r, r1))
                self.lgr.debug('replay dir for %s will be %s' % (replay, r1))
                replay_path = os.path.join(common_path, 'replays', r1)
                try:
                    os.makedirs(replay_path)
                except:
                    pass
                bin_path = os.path.join(replay_path, b)
                try:
                    os.makedirs(bin_path)
                except:
                    pass
                trace_path = os.path.join(bin_path, replay)
                source_trace = os.path.join(source_bin, replay)
                files = [source_trace, trace_path]
                self.lgr.debug('do pool for %s %s' % (source_trace, trace_path))
                pool.apply_async(doZipCopy, args=(files, ))
                self.lgr.debug('back  from do pool for %s %s' % (source_trace, trace_path))
        pool.close()
        pool.join()    
        self.lgr.debug('collectArtifacts completed')

ca = collectArtifacts()
ca.copyFiles(TRACES)
ca.copyFiles(CALL_LOGS)
