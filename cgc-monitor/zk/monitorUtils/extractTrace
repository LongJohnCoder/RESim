#!/usr/bin/python
'''
 * This software was created by United States Government employees
 * and may not be copyrighted.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
'''

import sys
'''
Decode a compressed trace file.
TBD add disassembly
'''
if len(sys.argv) < 2:
    print('extractTrace file')
    exit(1)
with open(sys.argv[1]) as f:
    lines = f.readlines()
    if not lines[0].startswith('Initial cycle:'):
        print('not a compact trace, expected Initial cycle')
        exit(1)
    dum, cycle = lines[0].split(':')
    start_cycle = int(cycle, 16)
    print('start cycle: %x' % start_cycle)
        
    for l in lines[1:]:
        header = int(l[0:2], 16)
        clock_len = header & 0x0f
        clock_digits = clock_len * 2
        clock_end = 2+clock_digits
        clock_chars = l[2:clock_end]
        clock_delta = int(clock_chars, 16)
        clock = start_cycle + clock_delta
        address_chars = l[clock_end:clock_end+8]
        #print l
        #print('header: %x clock_len: %d clock_end: %d clock_chars: %s addr_chars: %s' % (header, 
        #   clock_len, clock_end, clock_chars, address_chars))
        rest_start = clock_end+8
        address = int(address_chars, 16)
        #print('clock: %x address: %x   rest_start %d' % (clock, address, rest_start))
        rest = int(l[rest_start:], 16)
        if header & 0x80:
            # instruction
            print('inst: [0x%x] <0x%x> %x' % (clock, address, rest))
        else:
            read_write = 'Read'
            if header & 0x40:
                read_write = 'Write'
            byte_mask = (header & 0x30) >> 4
            num_bytes = 0
            if byte_mask == 0:
                num_bytes = 1
            elif byte_mask == 1:
                num_bytes = 2
            elif byte_mask == 2:
                num_bytes = 3
            elif byte_mask == 3:
                num_bytes = 4
            print('data: [0x%x] <0x%x> %s  %d bytes  0x%x' % (clock, address, read_write, num_bytes, rest))


            

