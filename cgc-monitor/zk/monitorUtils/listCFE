#!/usr/bin/env python
'''
 * This software was created by United States Government employees
 * and may not be copyrighted.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
'''

from monitorLibs import configMgr
from monitorLibs import cfeCsetConfig
import os
import glob
import sys
import argparse
cfg = configMgr.configMgr()
def getLatestGame():
    retval = None
    moved_dir = cfg.cfe_moved_dir
    done_games = sorted(os.listdir(moved_dir))
    for d in (done_games):
        try:
            ''' hack to filter out dirs that don't look like games'''
            dum = float(d)
            retval = d
        except:
            pass
    if retval is None:
        game_dir = cfg.cfe_cfg_files_dir
        done_games = sorted(os.listdir(game_dir))
        for d in (done_games):
            try:
                ''' hack to filter out dirs that don't look like games'''
                dum = float(d)
                retval = d
            except:
                pass

    return retval

def listPovThrows(game):
    game_str = game
    if game.startswith('db_'):
        part = game[3:]
        game_str = '%s*' % part
    moved_dir = cfg.cfe_moved_dir
    game_cfgs = glob.glob(os.path.join(moved_dir, game_str,'*.json'))
    for g_cfg_file in game_cfgs:
        g_cfg = cfeCsetConfig.cfeCsetConfig(g_cfg_file, game)
        pov = g_cfg.getPov()
        if pov is not None:
            print os.path.basename(g_cfg_file)
            print('\t%s team %s vs %s pov: %s' % (g_cfg.getCommonName(), g_cfg.getPovTeam(), g_cfg.getTeamId(), 
               os.path.basename(pov)))
    game_dir = cfg.cfe_cfg_files_dir
    game_cfgs = glob.glob(os.path.join(game_dir, game_str,'*.json'))
    for g_cfg_file in game_cfgs:
        g_cfg = cfeCsetConfig.cfeCsetConfig(g_cfg_file, game)
        pov = g_cfg.getPov()
        if pov is not None:
            print os.path.basename(g_cfg_file)
            print('\t%s team %s vs %s pov: %s' % (g_cfg.getCommonName(), g_cfg.getPovTeam(), g_cfg.getTeamId(), 
               os.path.basename(pov)))

def dumpJson(cfg_file):
    moved_dir = cfg.cfe_moved_dir
    matches = glob.glob(os.path.join(moved_dir,'*',cfg_file))
    if len(matches)>0:
        with open(matches[0]) as cf:
            for line in cf:
                print line
    else:
        game_dir = cfg.cfe_cfg_files_dir
        matches = glob.glob(os.path.join(game_dir,'*',cfg_file))
        if len(matches)>0:
            with open(matches[0]) as cf:
                for line in cf:
                    print line
    

parser = argparse.ArgumentParser(description='List povs thrown in a CFE game')
parser.add_argument('-g', '--game', help='game identifier, defaults to latest game')
parser.add_argument('-j', '--json', help='json file to dump')
args = parser.parse_args()
if args.game is not None:
   listPovThrows(args.game)
elif args.json is not None:
   dumpJson(args.json)
else:
    latest_game = getLatestGame()
    print('latest game = %s' % latest_game)
    listPovThrows(latest_game)

