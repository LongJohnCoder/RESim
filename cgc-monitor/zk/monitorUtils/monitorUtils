#!/usr/bin/python
'''
 * This software was created by United States Government employees
 * and may not be copyrighted.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
'''
'''
msc utility functions, see usage
'''
import socket
import logging
import sys
import time
import subprocess
import glob
import os
try:
    from monitorLibs import szk
except:
    if not __file__.startswith('/usr/bin'):
        sys.path.append('../')
    from monitorLibs import szk
from monitorLibs import replayMgr
from monitorLibs import configMgr
from monitorLibs import teamSets
from monitorLibs import dbgQueue
from monitorLibs import accessSQL
from monitorLibs import utils
class monitorUtils():
    def __init__(self, szk, cfg, lgr):
        self.szk = szk
        if lgr is not None:
            self.lgr = lgr
        else:
            self.lgr = logging
            #fh = self.setLogger(cfg.logdir)
            #self.szk.setLogger(fh)
        self.rm = replayMgr.replayMgr(szk, cfg, lgr)
        self.team_sets = teamSets.teamSets(szk, lgr)
 
        self.dq = dbgQueue.dbgQueue(self.szk, lgr)
        self.cfg = cfg

    def setLogger(self, log_dir):
        self.lgr = logging.getLogger(__name__)
        self.lgr.setLevel(logging.DEBUG)
        fh = logging.FileHandler(log_dir+'/clearHardLocks.log')
        fh.setLevel(logging.DEBUG)
        frmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        fh.setFormatter(frmt)
        self.lgr.addHandler(fh)
        self.lgr.info('Start of log from clearHardLocks.py')
        return fh

    def clearDebugQueue(self):
        self.dq.cleanQueue()

    def listDebugQueue(self):
        self.dq.listQueue()

    def cleanReplays(self):
        self.rm.rmIncompleteReplays()

    def updateReplayConfig(self, config):
        self.rm.updateReplayConfig(config)

    def cleanAllReplays(self):
        self.rm.rmAllReplays()

    def cleanAuthPOVs(self):
        self.rm.rmAuthPOVs()

    def removeLocks(self):
        '''
            Remove all hard locks on replays that are locked yet not done
        '''
        self.szk.removeLocks(szk.FORENSICS, 'all')

    def rmCB(self, cb_name):
        path = szk.CBS_NODE+'/'+cb_name
        try:
            self.szk.zk.delete(path, recursive=True)
            print('removed node for cb %s' % cb_name)
        except kazoo.exceptions.NoNodeException:
            print('no such node')
        
    def rmCBbyName(self, cb_startswith):
        children = self.szk.zk.get_children(szk.CBS_NODE)
        for child in children:
            #print('check %s' % child)
            if child.startswith(cb_startswith):
                path = szk.CBS_NODE+'/'+child
                self.szk.zk.delete(path, recursive=True)
                print('removed node for cb %s' % child)

    def rmCBbyAnyName(self, cb_any):
        children = self.szk.zk.get_children(szk.CBS_NODE)
        for child in children:
            #print('check %s' % child)
            if cb_any in child:
                path = szk.CBS_NODE+'/'+child
                self.szk.zk.delete(path, recursive=True)
                print('removed node for cb %s' % child)

    def listDatabases(self):
        print('in listDatabases db_name is %s' % self.cfg.db_name)
        sql = accessSQL.accessSQL(self.cfg.db_name, self.lgr)
        sql.listDatabases()

    def dropDatabases(self, prefix):
        sql = accessSQL.accessSQL(self.cfg.db_name, self.lgr)
        sql.dropDatabases(prefix)

    def rmReplaysFromDB(self, cb_startswith):
        sql = accessSQL.accessSQL(self.cfg.db_name, self.lgr)
        print('delete %s from database %s' % (cb_startswith, self.cfg.db_name))
        sql.rmReplaysFromDB(cb_startswith)

    def setTeamSetsNotLogged(self):
        self.team_sets.clearAllLogged()
        print('all team sets reverted to "not logged" state')

    def setReplaysNotLogged(self):
        self.rm.clearAllLogged()
        print('all replay nodes reverted to "not logged" state')

    def setAuthPOVsNotLogged(self):
        self.rm.clearAllAuthPOVsLogged()
        print('all author pov replay nodes reverted to "not logged" state')

    def rmMonitorStatus(self):
        self.szk.deleteOurStatus()

    def rmMonitorReset(self):
        self.szk.deleteOurReset()

    def rmAllStatusNodes(self):
        self.szk.clearAllStatusNodes()

    def clearTeamSets(self):
        self.team_sets.cleanTeamSets()
        print('all team sets deleted')

    def fixReplayLogs(self):
        sql = accessSQL.accessSQL(self.cfg.db_name, self.lgr)
        cbs = self.szk.getCBs()
        for cb in cbs:
            removed = 0
            replays = sql.getReplays(cb)
            logged = self.rm.getLogged(cb)
            for r in logged:
                if r not in replays:
                    self.rm.clearLogged(cb, r)
                    removed += 1
            print('cb: %s removed %d replay log flags' % (cb, removed))

    def rmReplay(self, cb, replay):
        self.rm.rmReplay(cb, replay)

    def dumpReplayCfg(self, instance):
        self.szk.setInstance(instance)
        self.szk.dumpReplayCfg()
        
    def dumpServiceCfg(self, instance):
        self.szk.setInstance(instance)
        self.szk.dumpServiceCfg()

    def forceQuit(self):

        children = self.szk.zk.get_children(szk.CBS_NODE)
        children.sort()
        count=0
        current_time = time.time()
        for child in children:
            cb_node = szk.CBS_NODE+'/'+child
            value, stat = self.szk.zk.get(cb_node)
            hint_list = value.strip().split(' ')
            hint_list = filter(None, hint_list)
            cb_children = self.szk.zk.get_children(cb_node)
            replay_count = 0
            for replay in cb_children:
                if self.szk.isPoV(replay) or self.szk.isPoll(replay):
                    replay_count += 1
            if replay_count == len(hint_list):
                #print('%s is done' % child)
                continue
            for replay in cb_children:
                if replay in hint_list:
                    continue
                #print('%s not in hint_list' % replay)
                if self.szk.isPoV(replay) or self.szk.isPoll(replay):
                    path = cb_node+'/'+replay
                    status = self.szk.replayStatus(path, current_time)
                    if "Locked" in status:
                        parts = status.split()
                        drone = parts[2]
                        duration = int(parts[4])
                        if duration > 3000:
                            print '%s \t%s \t%s' % (child, replay, status)
                            subprocess.call(['/usr/bin/forceQuitReplay', drone])

    def fixCache(self):
        self.rm.fixCache()
 
    def multiBin(self, cb):      
        cb_path = szk.CBS_NODE+"/"+cb
        if cb.startswith('CB'):
            self.rm.multiBinaryCB(cb_path, cb)
        else:
            common = utils.getCommonNameCFE([cb])
            bin_paths_dir = os.path.join(self.cfg.cb_dir, common, 'competitor')
            wild = bin_paths_dir+'/*/*/*/'+cb+'*'
            print wild
            found = glob.glob(wild)
            self.rm.getBinConfigs(cb_path, found) 

    def binConfig(self, cb):      
        cb_path = szk.CBS_NODE+"/"+cb
        if cb.startswith('CB'):
            self.rm.multiConfig(cb_path, cb)
        else:
            common = utils.getCommonNameCFE([cb])
            bin_paths_dir = os.path.join(self.cfg.cb_dir, common, 'competitor')
            wild = bin_paths_dir+'/*/*/*/'+cb+'*'
            print wild
            found = glob.glob(wild)
            self.rm.showBinConfigs(cb_path, found) 

 

def usage():
    print('monitorUtils <cmd>')
    print('\trl -- remove all locks from incomlete replays')
    print('\trir -- remove all incomlete replays')
    print('\tupdate_replay_config -- change the config checksum for all incomplete replays to match given config node')
    print('\trr [cb] [replay] -- remove a specific replay')
    print('\trar -- remove all replays')
    print('\trm_auth_povs -- remove all author pov replays')
    print('\trmcb -- remove the given CB from the file hierarchy')
    print('\trmcb_byname -- remove all CBs that start with the given string (min 3 chars)')
    print('\trmcb_any -- remove all CBs that contain the given string (min 3 chars)')
    print('\trmcb_db -- remove all CBs that start with the given string from the database')
    print('\tunlog_team_sets -- remove all zk nodes to show that all team sets have not yet been logged')
    print('\tunlog_replays -- remove all zk nodes to show that all replays have not yet been logged')
    print('\tunlog_auth_povs -- remove all zk nodes to show that all author POVs have not yet been logged')
    print('\tfix_replay_logs -- remove all replay logged nodes that lack a corresponding database entry in the replays table')
    print('\tdbgq_clear -- clear the debug queue')
    print('\tdbgq_list -- list the debug queue')
    print('\trm_status -- remove monitor status node, zk ephemeral sometimes is not')
    print('\trm_all_status_nodes -- remove all monitor status nodes, zk ephemeral sometimes is not')
    print('\trm_reset  -- remove monitor reset node, for testing reset/reinit of monitor')
    print('\tclear_team_sets  -- remove all team sets')
    print('\tdump_replay_cfg <instance>  -- dump the replay config node named by the instance')
    print('\tdump_service_cfg <instance>  -- dump the service config node named by the instance')
    print('\tldbs -- list databases')
    print('\tdrop_dbs -- drop databases that start with a prefix (chance to bail at prompt)')
    print('\tforce_quit -- force quit all replays that have run more than 3000 seconds')
    print('\tfix_cache -- repair the CB node cache of done replays')
    print('\tmulti_bin -- Update configuration node for a binary(e.g., text sections)')

if __name__ == "__main__":
    if len(sys.argv) < 2:
        usage()
        exit(1)
    hostname = socket.gethostname()
    cfg = configMgr.configMgr()
    zk = szk.szk(hostname, cfg)
    print('cfg db_name is %s' % cfg.db_name)
    mu = monitorUtils(zk, cfg, None)
    if sys.argv[1] == 'rl':
        mu.removeLocks()
    elif sys.argv[1] == 'rir':
        mu.cleanReplays()
    elif sys.argv[1] == 'rr':
        if len(sys.argv) == 4:
            mu.rmReplay(sys.argv[2], sys.argv[3])
        else:
            usage()
    elif sys.argv[1] == 'update_replay_config':
        mu.updateReplayConfig(sys.argv[2])
    elif sys.argv[1] == 'rar':
        mu.cleanAllReplays()
    elif sys.argv[1] == 'rm_auth_povs':
        mu.cleanAuthPOVs()
    elif sys.argv[1] == 'rmcb':
        if len(sys.argv) > 2 and len(sys.argv[2]) > 8:      
            mu.rmCB(sys.argv[2])
    elif sys.argv[1] == 'rmcb_byname':
        if len(sys.argv) > 2 and len(sys.argv[2]) > 3:      
            mu.rmCBbyName(sys.argv[2])
    elif sys.argv[1] == 'rmcb_any':
        if len(sys.argv) > 2 and len(sys.argv[2]) > 3:      
            mu.rmCBbyAnyName(sys.argv[2])
    elif sys.argv[1] == 'rmcb_db':
        if len(sys.argv) > 2 and len(sys.argv[2]) > 3:      
            mu.rmReplaysFromDB(sys.argv[2])
    elif sys.argv[1] == 'unlog_team_sets':
        mu.setTeamSetsNotLogged()
    elif sys.argv[1] == 'unlog_replays':
        mu.setReplaysNotLogged()
    elif sys.argv[1] == 'unlog_auth_povs':
        mu.setAuthPOVsNotLogged()
    elif sys.argv[1] == 'fix_replay_logs':
        mu.fixReplayLogs()
    elif sys.argv[1] == 'dbgq_clear':
        mu.clearDebugQueue()
    elif sys.argv[1] == 'dbgq_list':
        mu.listDebugQueue()
    elif sys.argv[1] == 'rm_status':
        mu.rmMonitorStatus()
    elif sys.argv[1] == 'rm_reset':
        mu.rmMonitorReset()
    elif sys.argv[1] == 'rm_all_status_nodes':
        mu.rmAllStatusNodes()
    elif sys.argv[1] == 'clear_team_sets':
        mu.clearTeamSets()
    elif sys.argv[1] == 'ldbs':
        mu.listDatabases()
    elif sys.argv[1] == 'multi_bin':
        mu.multiBin(sys.argv[2])
    elif sys.argv[1] == 'bin_config':
        mu.binConfig(sys.argv[2])
    elif sys.argv[1] == 'drop_dbs' and len(sys.argv)>2:
        mu.dropDatabases(sys.argv[2])
    elif sys.argv[1] == 'dump_replay_cfg':
        if len(sys.argv) == 3:
            mu.dumpReplayCfg(sys.argv[2])
        else:
            usage()
    elif sys.argv[1] == 'dump_service_cfg':
        if len(sys.argv) == 3:
            mu.dumpServiceCfg(sys.argv[2])
        else:
            usage()
    elif sys.argv[1] == 'force_quit':
        mu.forceQuit()
    elif sys.argv[1] == 'fix_cache':
        mu.fixCache()
    else:
        usage()
    zk.stop()
