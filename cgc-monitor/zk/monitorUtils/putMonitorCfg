#!/usr/bin/python
'''
 * This software was created by United States Government employees
 * and may not be copyrighted.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
'''
import time
import sys
import os
import socket
import subprocess
from subprocess import Popen
from monitorLibs import configMgr
from monitorLibs import szk
from monitorLibs import utils
'''
   Write the monitor configuration overrides (configMgr) file to its zookeeper node.
   Optional key/value pairs will replace what is in the file, e.g., "cgc_event=cqe")
'''
def checkSane():
    '''
    Make sure this looks like a master to avoid inadvertent updates from a slave.
    '''
    p1 = subprocess.Popen('/bin/df', stdout = subprocess.PIPE)
    output, error = p1.communicate()
    if 'vmLib' in output:
        print('this looks like a slave, it has vmLib mounted, cannot load from slave')
        print('because the config data includes the ip of the master, what we assume is')
        print('whereever this script is run from.')
        exit(1)
    else:
        if not os.path.exists('/mnt/vmLib/cgcForensicsRepo'):
            print('this looks like a slave, it lacks a vmLib local directory, cannot load from slave')
            print('because the config data includes the ip of the master, what we assume is ')
            print('whereever this script is run from.')
            exit(1)

def replaceStrings(args, data):
    retval = data
    for arg in args:
        #print('replaceData, arg is %s' % arg)
        if len(arg) > 3:
            did_replace = False
            if '=' in arg:
                field, value = arg.split('=')
                if field is None or value is None:
                    print('not a valid key/value %s' % arg)
                    exit(1)
                lines = data.split('\n')
                for line in lines:
                    if '=' in line:
                        line_field, line_value = line.split('=')
                        #print('check line %s for %s == %s' % (line, line_field, field))            
                        if line_field is None or line_value is None:
                            print('not a valid key/value %s, skip' % line)
                        elif line_field == field:
                            retval = retval.replace(line, arg)
                            did_replace = True
            else:
                print('argument is not a keyvalue pair %s' % arg)
                exit(1)
            if not did_replace:
                print('did not find %s to replace, exit' % arg)
                exit(1)
    return retval    

print('putMonitorCfg begin')
if not (len(sys.argv) > 1 and sys.argv[1] == '-f'):                
    checkSane()
hostname = socket.gethostname()
cfg = configMgr.configMgr()
print('init zk')
zk = szk.szk(hostname, cfg)
print('back frominit zk')
node = szk.CONFIG_NODE
f = open(cfg.cfg_overrides, 'r')
data = f.read()
ip = utils.getMyIP()
if len(sys.argv) > 1:
    data = replaceStrings(sys.argv[1:], data)
data=data+'repo_master='+ip
bs = data.encode('latin-1')
stat = zk.zk.exists(node)
if stat is None:
    zk.zk.create(node, bs, None, False, False, False) 
else:
    zk.zk.set(node, bs)
print('Loaded %s into the CONFIG_NODE' % cfg.cfg_overrides)
