#!/usr/bin/env python
'''
 * This software was created by United States Government employees
 * and may not be copyrighted.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
'''

import logging
import sys
import os
import signal
import time
import subprocess
import json
from monitorLibs import teamSets
from monitorLibs import configMgr
from monitorLibs import szk
from monitorLibs import getMonitor
from monitorLibs import packageMgr
from monitorLibs import utils


def setLogger():
        lgr = logging.getLogger(__name__)
        lgr.setLevel(logging.DEBUG)
        #fh = logging.FileHandler('/mnt/cgc/logs/updateMasterCfg.log')
        ch = logging.StreamHandler()
        ch.setLevel(logging.DEBUG)
        frmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        ch.setFormatter(frmt)
        lgr.addHandler(ch)
        lgr.info('Start of log from putOneFromSet')
        return lgr


def signal_handler(signal, frame):
    print( 'in signal_handler of putPackages use_dbg_queue is %r' % use_dbg_queue)
    if use_dbg_queue:
        # Stop the associated simics instance via its fifo that servers as stdin
        print( 'Stop the simics instance by writting to the pipe')
        f=open('simics.stdin', 'a')
        f.write('quit\n')
        f.close()
    zk.deleteAlternateConfig()
    zk.stop()
    sys.exit(1)


if len(sys.argv) != 6:
    print('putOneFromGame <instance> <common> <round_id> <thrower> <defender>')
    exit(0)

instance = sys.argv[1]

common = sys.argv[2]
round_id = sys.argv[3]
thrower = sys.argv[4]
defend = sys.argv[5]


cfg = configMgr.configMgr()
zk = szk.szk(None, cfg, instance=instance)
lgr = setLogger()

p1 = subprocess.Popen(['/usr/bin/ssh', 'mft-ref', '/usr/bin/findThrow.py', common, round_id, thrower, defend], stdout = subprocess.PIPE)
output, error = p1.communicate()
try:
    my_json = json.loads(output)
except:
    print('could not parse <%s>' % output)
    exit(1)

gm = getMonitor.getMonitor(zk, cfg, lgr)

full_rcbs = my_json['rcb']
rcbs = []
for path in full_rcbs:
    rcbs.append(os.path.basename(path))
team = defend
rules = my_json['ids']
pov_config = json.dumps(my_json['pov_config'])
replay = my_json['pov']

if replay is not None:

    if not zk.alternateConfigFromName('msc'):
        print('alternat config from name failed for msc')
    else:
        zk.deleteOurReset()
    print('build pkg for %s %s' % (rcbs[0], replay))
    cb_name = utils.rmBinNumFromName(os.path.basename(rcbs[0]))
    if 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855' in rules:
        rules = None
    test_package = gm.buildPackageXML(cb_name, replay, 'msc', '12345', rcbs, rules, team, pov_config)
    #print package
    use_dbg_queue = True
    #check_monitor = False 
    #pp = packageMgr.packageMgr(zk, lgr, cfg, '0', False, dbg_queue=use_dbg_queue, check_monitor=check_monitor)
    pp = packageMgr.packageMgr(zk, lgr, cfg, instance, False, check_monitor=False)
    signal.signal(signal.SIGINT, signal_handler)
    start_time = time.time()
    iter_time = time.time()
    print('PACKAGE: %s' % test_package)
    pp.xmlParse(test_package)
    pp.localCopyPackageNoContext(test_package)
    mycount = pp.readCounter()
    pp.doOnePackage(test_package)
    pp.waitCounter(mycount)
    iter_secs = round(time.time() - iter_time)
    pp.lgr.debug('putOnePackage done with package %d seconds' % (iter_secs))
    total_secs = round(time.time() - start_time)
    print 'took %d seconds' % total_secs
    pp.lgr.info('%s  %s  in %d seconds' % (rcbs[0], replay, total_secs))
    zk.stop()       

