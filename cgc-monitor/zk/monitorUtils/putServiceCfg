#!/usr/bin/python
'''
 * This software was created by United States Government employees
 * and may not be copyrighted.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
'''
import time
import sys
import socket
from monitorLibs import szk
from monitorLibs import configMgr
'''
   Write the service_master configuration file to its zookeeper node.
   Service cfg nodes are per target, TBD, do they need to be? 
'''
def putCfg(instance, cfg_file, cfg):
    hostname = socket.gethostname()
    zk = szk.szk(hostname, cfg, instance)
    f = open(cfg_file, 'r')
    data = f.read()
    zk.updateServiceCFG(data)
    print('Put %s into ZK node' % cfg_file)
    print data
    zk.stop()
if __name__ == '__main__':
    instance = '0'
    cfg = configMgr.configMgr()
    if len(sys.argv) > 1:
        instance = sys.argv[1]
    cfg_file = cfg.service_master_cfg
    if len(sys.argv) > 2:
        cfg_file = sys.argv[2]
    putCfg(instance, cfg_file, cfg)
