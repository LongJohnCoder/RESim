#!/usr/bin/python
'''
 * This software was created by United States Government employees
 * and may not be copyrighted.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
'''
import MySQLdb as mdb
import sys
from monitorLibs import configMgr
from monitorLibs import szk
'''
Drop and create all of the tables within the local monitor database.
'''
class rebuildSqlTables():
    def __init__(self):
        self.con = None
        try:
            self.con = mdb.connect('localhost', 'cgc', 'password')
        except mdb.Error, e:
            print "rebuildSqlTables, init, error %d: %s" % (e.args[0], e.args[1])

    def dropAll(self):
        retval = False
        try:
            t_cur = self.con.cursor()
            t_cur.execute("DROP TABLE IF EXISTS sets")
            t_cur.execute("DROP TABLE IF EXISTS teams")
            t_cur.execute("DROP TABLE IF EXISTS csi")
            t_cur.execute("DROP TABLE IF EXISTS protected_access")
            t_cur.execute("DROP TABLE IF EXISTS replays")
        except mdb.Error, e:
            print "error in dropAll %d: %s" % (e.args[0], e.args[1])

    def createConfigDB(self):
        print 'in createConfigDB'
        retval = False
        try:
            t_cur = self.con.cursor()
            cmd = "CREATE DATABASE IF NOT EXISTS configs_db CHARACTER SET latin1"
            print 'command is %s' % cmd
            t_cur.execute(cmd)
            cmd = "CREATE TABLE IF NOT EXISTS configs_db.configs (hash CHAR(16),\
                   config TEXT(100000))"
            t_cur.execute(cmd)
        except mdb.Error, e:
            print "error createConfigDB, %d: %s" % (e.args[0], e.args[1])

    def createDB(self, db_name):
        print 'in createDB for db: %s' % db_name
        retval = False
        try:
            t_cur = self.con.cursor()
            cmd = "CREATE DATABASE IF NOT EXISTS %s CHARACTER SET latin1" % db_name.strip()
            print 'command is %s' % cmd
            t_cur.execute(cmd)
        except mdb.Error, e:
            print "error createDB, %d: %s" % (e.args[0], e.args[1])
        try:
            self.con.close()
            self.con = mdb.connect('localhost', 'cgc', 'password', db_name)
        except mdb.Error, e:
            print "error createDB connecting to db, %d: %s" % (e.args[0], e.args[1])
        
    
    def createTables(self, cfg):
        retval = False
        try:
            t_cur = self.con.cursor()
            cmd = "CREATE TABLE teams (name CHAR(3), \
                     PRIMARY KEY (name))"
            t_cur.execute(cmd)

            cmd = "CREATE TABLE csi (name CHAR(15),\
                     PRIMARY KEY (name))"
            t_cur.execute(cmd)

            if not cfg.cfe:
                cmd = "CREATE TABLE sets (team CHAR(3),\
                   csi CHAR(15),\
                   version INT,\
                   start_time DATETIME,\
                   finish_time TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,\
                   done BOOL NOT NULL DEFAULT 0,\
                   rcb_cleared BOOL NOT NULL DEFAULT 0,\
                   pov_cleared BOOL NOT NULL DEFAULT 0,\
                   logged_to_scoring BOOL NOT NULL DEFAULT 0,\
                   record VARCHAR(1024),\
                   pov VARCHAR(1024),\
                   rcb VARCHAR(1024),\
                   PRIMARY KEY (team, csi, version),\
                   FOREIGN KEY (team) REFERENCES teams(name),\
                   FOREIGN KEY (csi) REFERENCES csi(name))"
            else:
                cmd = "CREATE TABLE sets (team CHAR(3),\
                   csi CHAR(15),\
                   pov_team CHAR(3),\
                   team_set CHAR(128),\
                   cfg_file CHAR(128),\
                   start_time DATETIME,\
                   finish_time TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,\
                   done BOOL NOT NULL DEFAULT 0,\
                   rcb_cleared BOOL NOT NULL DEFAULT 0,\
                   pov_cleared BOOL NOT NULL DEFAULT 0,\
                   logged_to_scoring BOOL NOT NULL DEFAULT 0,\
                   record VARCHAR(1024),\
                   pov VARCHAR(1024),\
                   rcb VARCHAR(1024),\
                   round_id CHAR(32),\
                   PRIMARY KEY (team_set))"
            t_cur.execute(cmd)

            cmd =  "CREATE TABLE replays (id BIGINT NOT NULL AUTO_INCREMENT,\
                      cb VARCHAR(128), \
                      replay VARCHAR(128), \
                      rules VARCHAR(128), \
                      config CHAR(16),\
                      duration FLOAT,\
                      cb_calls INT,\
                      cb_wrote INT,\
                      cb_read INT,\
                      replay_sys_calls INT,\
                      cb_cycles BIGINT,\
                      cb_user_cycles BIGINT,\
                      cb_faults INT,\
                      replay_faults INT,\
                      wall_time FLOAT,\
                      untouched_blocks INT,\
                      display_event VARCHAR(1024),\
                      is_pov BOOLEAN,\
                      is_score BOOLEAN,\
                      load_fail BOOLEAN NOT NULL DEFAULT 0,\
                      poll_fail INT,\
                      drone VARCHAR(512),\
                      team_set VARCHAR(512),\
                      time_start DATETIME,\
                      time_end DATETIME,\
                      raw VARCHAR(4096),\
                      PRIMARY KEY (id),\
                      INDEX replay_pair (cb, replay))"
            t_cur.execute(cmd)
            cmd =  "CREATE TABLE protected_access (id BIGINT NOT NULL AUTO_INCREMENT,\
                      replay_id BIGINT, \
                      length INT,\
                      location INT,\
                      delta BIGINT,\
                      cpl INT,\
                      PRIMARY KEY (id),\
                      FOREIGN KEY (replay_id) REFERENCES replays(id))"
            t_cur.execute(cmd)
        except mdb.Error, e:
            print "error %d: %s" % (e.args[0], e.args[1])

    def closeDB(self):
        self.con.close()

cfg = configMgr.configMgr()
''' use szk node overrides for config data to get db_name '''
zk = szk.szk(None, cfg)
rt = rebuildSqlTables()
print('Create database: %s' % cfg.db_name)
rt.createConfigDB()
rt.createDB(cfg.db_name)
rt.dropAll()
rt.createTables(cfg)
rt.closeDB()
zk.stop()
