#!/usr/bin/env python
'''
 * This software was created by United States Government employees
 * and may not be copyrighted.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
'''

from monitorLibs import configMgr
from monitorLibs import cfeCsetConfig
from monitorLibs import replayMgr
from monitorLibs import szk
from monitorLibs import updateMasterCfg
from monitorLibs import teamSets
import os
import socket
import glob
import sys
import logging

cfg = configMgr.configMgr()
def getLatestGame():
    retval = None
    moved_dir = cfg.cfe_moved_dir
    done_games = sorted(os.listdir(moved_dir))
    for d in (done_games):
        try:
            ''' hack to filter out dirs that don't look like games'''
            dum = float(d)
            retval = d
        except:
            pass
    return retval

def replayTeamSetPovs(game, checksum):
    all_sets = team_sets.getTeamSets() 
    for ts in all_sets:
        ts_game = team_sets.getGameId(ts)
        if ts_game == game:
            print('%s is in game %s' % (ts, game))
            pov = team_sets.getPov(ts)
            if pov is not None:
                cb_binaries = team_sets.getTeamRCBs(ts)            
                cb_name = cb_binaries[0]
                if rpm.isReplayDone(cb_name, pov):
                    checksum_was, config = rpm.getReplayChecksum(cb_name, pov)
                    if checksum_was !=  checksum:
                        print('would replay %s %s' % (cb_name, pov))
                        put_pov, got_nice = rpm.putReplay(cb_name, pov, False, szk.FORENSICS, checksum, set_name=ts, config='analysis', replace=True)
                        rpm.rmReplayDone(cb_name, pov)
                        rpm.clearLogged(cb_name, pov)
                        rpm.rmReplayLock(cb_name, pov)
                    else:
                        print('replayTeamSetPovs, replayTeamSetPovs, already replayed %s %s for checksum %s (%s)' % (cb_name, pov, checksum, config))
                else:
                    print('replayTeamSetPovs, replay not done: %s  %s' % (cb_name, pov))
                break


def dumpJson(cfg_file):
    moved_dir = cfg.cfe_moved_dir
    matches = glob.glob(os.path.join(moved_dir,'*',cfg_file))
    if len(matches)>0:
        with open(matches[0]) as cf:
            for line in cf:
                print line

def usage():
    print('vizPovs [json]')
    print('replay team set povs')
    exit(1)
hostname = socket.gethostname()
cfg = configMgr.configMgr()
zk = szk.szk(hostname, cfg)
umc = updateMasterCfg.updateMasterCfg(zk, cfg, logging)
checksum = umc.getChecksum(szk.MASTER_ANALYSIS_CONFIG_NODE)
print('checksum is %s' % checksum)
rpm = replayMgr.replayMgr(zk, cfg, logging)
team_sets = teamSets.teamSets(zk, lgr=logging)
if len(sys.argv) == 1:
    latest_game = getLatestGame()
    print('latest game = %s' % latest_game)
    replayTeamSetPovs(latest_game, checksum)
elif len(sys.argv) == 2:
    replayTeamSetPovs(sys.argv[1], checksum)
elif len(sys.argv) == 2 and sys.argv[1].endswith('json'):
    dumpJson(sys.argv[1])


