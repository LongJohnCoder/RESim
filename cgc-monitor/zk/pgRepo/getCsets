#!/usr/bin/python
from pgRepo import models 
from pgRepo import cutils
import sys
import os
import shutil
import socket
import subprocess
from subprocess import Popen, PIPE
sys.path.append('../py')
from monitorLibs import utils
from monitorLibs import configMgr
from monitorLibs import szk
from pgRepo import pgCsets
'''
Create a forensics-local repo of CBs / PoVs / polls taken from the MITLL database server
'''
class getCsets():
    def __init__(self, cb_top, scoring_top, no_db=False, lgr=None, max_polls = None):
         
        self.cbs_dir = cb_top
        self.scoring_top = scoring_top
        self.cfg = configMgr.configMgr()
        hostname = socket.gethostname()
        zk = szk.szk(hostname, self.cfg)
        self.lgr = lgr
        if lgr is None:
            self.lgr = utils.getLogger('getCsets', self.cfg.logdir)
            print('got logger')
            self.lgr.debug('getCsets init')
        
        self.event = self.cfg.cgc_event
        if cb_top is None:
            self.cbs_dir = self.cfg.cb_dir
        if not no_db:
            if not self.checkNFS():
                self.mountNFS()
            self.db = models.db_init(host=self.cfg.scoring_server, database=self.cfg.cgc_event_db)
            if self.db is None:
                print('db init failed, exit')
                self.lgr.error('db init failed, exit')
                exit(1)

            self.event_id = models.Event.get(self.event).event_id
            print('event id for %s is %d' % (self.event, self.event_id))
            self.lgr.debug('pgCsets event id is %d' % self.event_id)
        self.pg_csets = pgCsets.pgCsets(cb_top, scoring_top, self.cfg, self.lgr, max_polls=max_polls)

    def getCBs(self):
        event_sets = models.EventCset.get(self.event)
        print('there are %d Csets in the event' % (len(event_sets)))
        event_path = os.path.join(self.event, 'challenge-sets')
        for ec in event_sets:
            cs = models.Cset.select(cset_id = ec.cset_id)[0]
            csid = cutils.getCSID(cs)
            self.lgr.debug('cset: %d %s' % (cs.cset_id, csid))
            self.pg_csets.doCB(csid, cs.cbs, cs.pcbs, cs.polls, cs.povs, event_path)

    def checkNFS(self):
        retval = False
        p = Popen(['/bin/df'], stdout=PIPE, stderr=PIPE)
        output, err = p.communicate()
        retval = p.returncode
        if '/mnt/data' in output:
            retval = True
        return retval

    def mountNFS(self):
        mount_point = self.cfg.scoring_server+':/data' 
        retval = subprocess.call(['/usr/bin/sudo',  'mount', '-o', 'ro', '-o', 'intr', '-t', 'nfs', mount_point, '/mnt/data'])
        if retval != 0:
            print('trouble with mount, %d' % retval)
            self.lgr.error('problem mounting data from %s' % mount_point)
        
if __name__ == "__main__":
    max_polls = None
    if len(sys.argv) > 1:
        try:
            max_polls = int(sys.argv[1])
        except:
            print('getCsets [max_polls]')
            exit(1)
    fdb = getCsets(None, cutils.mit_top, max_polls=max_polls)
    fdb.getCBs()
