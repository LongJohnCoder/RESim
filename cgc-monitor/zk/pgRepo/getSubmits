#!/usr/bin/python
import os
import sys
import time
import socket
sys.path.append('../py')
import subprocess
from subprocess import Popen, PIPE
import shutil
from monitorLibs import utils
from monitorLibs import configMgr
from monitorLibs import szk
from pgRepo import models
from pgRepo import cutils
from pgRepo import pgSubmits
'''
    Reference the cqe database to get competitor submissions
    Now uses the postgress db
'''

class getSubmits():
    def __init__(self, no_replays, scoring_top, no_db=False, lgr=None):
        self.cfg = configMgr.configMgr()
        hostname = socket.gethostname()
        zk = szk.szk(hostname, self.cfg)
        self.lgr = lgr
        if lgr is None:
            self.lgr = utils.getLogger('pgSubmits', self.cfg.logdir)
        if not no_db:
            #self.db = models.db_init(host='10.10.10.30')
            if not self.checkNFS():
                self.mountNFS()
            self.db = models.db_init(host=self.cfg.scoring_server, database=self.cfg.cgc_event_db)
            if self.db is None:
                print('db init failed, exit')
                self.lgr.error('db init failed, exit')
                exit(1)
            event = self.cfg.cgc_event
            self.event_id = models.Event.get(event).event_id
            print('event id is %d' % self.event_id)
            self.lgr.debug('getSubmits connected to db, event id is %d' % self.event_id)
        self.doneSets = {}
        self.pg_submits = pgSubmits.pgSubmits(no_replays, scoring_top, self.cfg, zk, self.lgr)

        
    ''' get all submittals, look for what we've not yet seen, and add those to 
        the file system and zk 
    '''    
    def checkNext(self, latest, just_one=False):
        #subs = app.fql.select_all(event)
        subs = models.Submission.select(event_id = self.event_id)
        self.lgr.debug('getSubmits, checkNext number of submissions is %d' % (len(subs)))
        sorted_subs = []
        for sub in subs:
            key = sub.timestamp
            sorted_subs.append((key, sub))
        # reverse sort if we only want the latest
        reverse_sort = not latest
        sorted_subs.sort(reverse=reverse_sort)
        #TBD get rid of case with pov that takes forever
        #hack = 0
        event_path = self.cfg.cgc_event
        for sub_tuple  in sorted_subs:
            sub = sub_tuple[1]
            competitor = models.Competitor.select(competitor_id = sub.competitor_id)[0]
            competitor_name = competitor.competitor_name 
            #self.lgr.debug('getSubmits, checkNext competitor %s' % competitor_name)
            cset = models.Cset.select(cset_id =  sub.cset_id)[0]
            csid = cutils.getCSID(cset)
            #self.lgr.debug('cset %s' % csid)
            comp_id = '%03d' % sub.competitor_id           
            key = '%s:%s' % (comp_id, csid)
            #self.lgr.debug('getSubmits, checkNext key is %s' % key)
            if key not in self.doneSets:
                #self.lgr.debug('getSubmits, checkNext, adding key %s to doneSets' % key)
                self.doneSets[key] = [] 
            if latest and len(self.doneSets[key]) > 0:
                # only want the latest for this key, and we already have one
                continue
            if sub.timestamp not in self.doneSets[key]:
                # add rcb if any
                self.doneSets[key].append(sub.timestamp)
                serial = len(self.doneSets[key])
                if latest:
                    # need to get the quantity of submits for this team/csid
                    dum = models.Submission.select(event_id = self.event_id, competitor_id = comp_id, cset_id = sub.cset_id)
                    serial = len(dum)
                self.lgr.info("getSubmits, checkNext, put submission for %s %s %d submission_id: %d timestamp: %s" % (comp_id, 
                    csid, serial, sub.submission_id, str(sub.timestamp)))
                self.pg_submits.putSub(csid, comp_id, serial, event_path, sub.rbs, sub.pov)
                if just_one:
                    return
   
    def log(self, message):
        self.lgr.info(message)

    def checkNFS(self):
        retval = False
        p = Popen(['/bin/df'], stdout=PIPE, stderr=PIPE)
        output, err = p.communicate()
        retval = p.returncode
        if '/mnt/data' in output:
            retval = True
        return retval

    def mountNFS(self):
        mount_point = self.cfg.scoring_server+':/data' 
        retval = subprocess.call(['/usr/bin/sudo',  'mount', '-o', 'ro', '-o', 'intr', '-t', 'nfs', mount_point, '/mnt/data'])
        if retval != 0:
            print('trouble with mount, %d' % retval)
            self.lgr.error('problem mounting data from %s' % mount_point)

def usage():
    print("getSubmits.py [no_replays] | [all] | [just_one]")
if __name__ == "__main__":
    no_replays = False
    latest = True
    just_one = False
    if len(sys.argv) > 1 and sys.argv[1] == 'no_replays':
        print('Not queuing replays')
        no_replays = True
    elif len(sys.argv) > 1 and sys.argv[1] == 'all':
        print('replay all versions of all replays')
        latest = False
    elif len(sys.argv) > 1 and sys.argv[1] == 'just_one':
        print('replay only the first submit')
        just_one = True
    elif len(sys.argv) > 1:
        useage()
        exit(0)
    fdb = getSubmits(no_replays, cutils.mit_top)
    if just_one or latest:
        fdb.checkNext(latest, just_one)
    else:
        while True:
            fdb.log('Poll scoring db looking for new submission')
            fdb.checkNext(latest, just_one)
            time.sleep(10)
